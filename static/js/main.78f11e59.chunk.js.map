{"version":3,"sources":["component/DrawCircles.js","component/CurrentTask.js","component/TaskTimerSettings.js","component/TaskTimer.js","component/MainPage.js","component/SideNavContent.js","component/SideNav.js","component/App.js","index.js"],"names":["DrawCircles","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tomatos","props","react","className","Array","count","fill","map","tomato","index","key","sum","React","CurrentTask","_this$props","isTaskWorking","firstTask","title","src_component_DrawCircles","TaskTimerSettings","handleTaskPlaying","isTaskPlaying","iconColor","onClick","TaskTimer","handleTasks","nowTimePlace","circleLength","nowTimerCircle","split","parseInt","viewBox","r","cx","cy","data-stroke-break","style","strokeDasharray","htmlFor","cursor","doType","doIndex","src_component_TaskTimerSettings","MainPage","tasks","length","src_component_CurrentTask","src_component_TaskTimer","SideNavContent","_this","onChangeTask","bind","assertThisInitialized","nowDate","Date","todayDateArray","getFullYear","getMonth","getDate","state","errorMsg","menuLists","add-task","show-tasks","analysis-tasks","choose-music","start","newArray","forEach","item","afterOneDay","getTime","push","concat","e","_e$target","target","value","dataset","setState","defineProperty","number","data","join","_this2","whereSideMenu","passedTasks","_this$state","id","type","onChange","data-number","data-filled","_this$props2","handleTaskSetting","task","isEditing","data-rotate","passedTask","_this$props3","sevenDaysAgoDate","handleChartsPeriod","sevenDaysAgoDateArray","sevenDaysArray","_getSevenDaysArray","filter","completedTime","day","doneTaskCount","replace","SideNav","handleSideMenu","handleClickMenu","showSideMenu","menuTitle","keys","data-menu-clicked","values","src_component_SideNavContent","App","workTimeLength","breakTimeLength","clearInterval","timerID","timeString","nowTimer","timeNumber","second","isCompleted","setInterval","_separateTimeString","_completedLevel","_combineTimeString","_this3","_tasks$","_resetTask","nowTime","shiftFirstTask","shift","_this4","_this$state2","updatedTimePlace","setTimeout","taskSettings","_this$state3","_startTimer","_breakTimer","_pauseTimer","doWhat","_this$state4","taskIsEditing","passedTaskIsEditing","_this$state5","splice","clickWhat","_this$state6","react_default","a","createElement","src_component_MainPage","src_component_SideNav","Component","ReactDOM","render","src_component_App","document","getElementById"],"mappings":"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","file":"static/js/main.78f11e59.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport './DrawCircles.scss';\r\n\r\nclass DrawCircles extends React.Component{\r\n    constructor(){\r\n        super()\r\n\r\n    }\r\n\r\n    render(){\r\n        const {tomatos} = this.props\r\n\r\n        return (\r\n            <div className='task-circles'>\r\n            {\r\n                // Array(tomatos.sum).fill('').map((tomato, index)=>{\r\n                //     return <div className={(index<tomatos.count?'task-circle task-circle-past':'task-circle')} key={'task-circle'+index}></div>\r\n                // })\r\n                Array(tomatos.count).fill('').map((tomato, index)=>{\r\n                    return <div className='task-circle task-circle-past' key={'task-circle'+index}></div>\r\n                })\r\n            }{\r\n                Array(tomatos.sum - tomatos.count).fill('').map((tomato, index)=>{\r\n                    return <div className='task-circle' key={'task-circle'+index+tomatos.count}></div>\r\n                })\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DrawCircles","import * as React from 'react'\r\nimport './CurrentTask.scss';\r\nimport DrawCircles from './DrawCircles';\r\n\r\nclass CurrentTask extends React.Component{\r\n    constructor(){\r\n        super()\r\n\r\n    }\r\n\r\n    render(){\r\n        const {isTaskWorking, firstTask} = this.props\r\n        const {title, tomatos} = firstTask\r\n\r\n        return (\r\n            <div className='task-block'>\r\n                <p className='title'>{title}</p>\r\n                { isTaskWorking ? (\r\n                    <div className='task-doing'>\r\n                        <DrawCircles tomatos={tomatos}/>\r\n                    </div>\r\n                    ):(\r\n                    <div className='break-card'>BREAK</div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CurrentTask","import * as React from 'react'\r\nimport './TaskTimerSettings.scss';\r\n\r\nclass TaskTimerSettings extends React.Component{\r\n    constructor(){\r\n        super()\r\n\r\n    }\r\n\r\n    render(){\r\n        const {handleTaskPlaying, isTaskPlaying, isTaskWorking} = this.props\r\n        const iconColor = isTaskWorking?'task-start':'task-break'\r\n        const defaultIconClass = 'material-icons '\r\n\r\n        return (\r\n            <div className='task-setting'>\r\n                <i className={defaultIconClass + (!isTaskPlaying && iconColor)} onClick={()=>{(!isTaskPlaying) && handleTaskPlaying('start')}}>play_arrow</i>\r\n                <i className={defaultIconClass + (isTaskPlaying && iconColor)} onClick={()=>{(isTaskPlaying) && handleTaskPlaying('pause')}}>pause</i>\r\n                <i className={defaultIconClass + (isTaskWorking && iconColor)} onClick={()=>{(isTaskWorking) && handleTaskPlaying('reset')}}>replay</i>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskTimerSettings","import * as React from 'react'\r\nimport './TaskTimer.scss';\r\nimport TaskTimerSettings from './TaskTimerSettings';\r\n\r\nclass TaskTimer extends React.Component{\r\n    constructor(){\r\n        super()\r\n\r\n    }\r\n\r\n    render(){\r\n        const {handleTasks, handleTaskPlaying, isTaskPlaying, isTaskWorking, nowTimePlace} = this.props\r\n        const circleLength = isTaskWorking? 10 : 5\r\n\r\n        let nowTimerCircle = nowTimePlace.split(':')\r\n        nowTimerCircle = ( 1 - (parseInt(nowTimerCircle[0]) * 60 + parseInt(nowTimerCircle[1])) / (circleLength)) * 942\r\n\r\n        return (\r\n            <div className='task-timer'>\r\n                <div className='task-now'>\r\n                    <svg viewBox=\"0 0 300 300\">\r\n                        <circle className=\"circle1\" r=\"150\" cx=\"150\" cy=\"150\" data-stroke-break={isTaskWorking} style={{'strokeDasharray': (nowTimerCircle +' 942')}}/>\r\n                    </svg>\r\n                    <p className='task-now-timer'>{nowTimePlace}</p>\r\n                </div>\r\n                { (isTaskPlaying) ? (\r\n                <div className='task-complete'>\r\n                    <label htmlFor='checkbox-task-complete' style={{'cursor':'not-allowed'}}>TASK COMPLETE</label>\r\n                </div>\r\n                ):(\r\n                <div className='task-complete'>\r\n                    <label htmlFor='checkbox-task-complete' onClick={()=>{handleTasks({'doType':'completed', 'doIndex': -1}, true)}}>TASK COMPLETE</label>\r\n                </div>\r\n                )}\r\n                <TaskTimerSettings handleTaskPlaying={handleTaskPlaying} isTaskPlaying={isTaskPlaying} isTaskWorking={isTaskWorking}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaskTimer","import * as React from 'react'\r\nimport './MainPage.scss';\r\nimport CurrentTask from './CurrentTask';\r\nimport TaskTimer from './TaskTimer';\r\n\r\nclass MainPage extends React.Component{\r\n    constructor(){\r\n        super()\r\n    }\r\n\r\n    render(){\r\n        const {tasks, isTaskPlaying, isTaskWorking, handleTasks, handleTaskPlaying} = this.props\r\n        \r\n        return (\r\n            (tasks.length > 0) ? (\r\n            <div className='main-page'>\r\n                <CurrentTask firstTask={tasks[0]} isTaskWorking={isTaskWorking}/>\r\n                <TaskTimer isTaskPlaying={isTaskPlaying} isTaskWorking={isTaskWorking} nowTimePlace={tasks[0].nowTimePlace} handleTasks={handleTasks} handleTaskPlaying={handleTaskPlaying}/>\r\n                <footer>PODOMORO</footer>\r\n            </div>\r\n            ):(\r\n                <div className='main-page'></div>\r\n            )\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPage","import * as React from 'react'\r\nimport './SideNavContent.scss';\r\nimport DrawCircles from './DrawCircles';\r\n\r\nclass SideNavContent extends React.Component{\r\n    constructor(){\r\n        \r\n        super()\r\n\r\n        this.onChangeTask=this.onChangeTask.bind(this)\r\n        this.handleTasks=this.handleTasks.bind(this)\r\n\r\n        const nowDate = new Date()\r\n        let todayDateArray = [nowDate.getFullYear(), nowDate.getMonth() + 1, nowDate.getDate()]\r\n\r\n        this.state={\r\n            title: '',\r\n            count: 1,\r\n            errorMsg: '',\r\n            menuLists: [\r\n                {'add-task': 'add_circle_outline'},\r\n                {'show-tasks': 'menu'},\r\n                {'analysis-tasks': 'bar_chart'},\r\n                {'choose-music': 'music_note'}\r\n            ],\r\n            todayDateArray\r\n        }\r\n    }\r\n\r\n    _getSevenDaysArray(start){\r\n        let newArray = [start]\r\n\r\n        Array(6).fill().forEach((item, index)=>{\r\n            let afterOneDay = new Date(new Date(newArray[index]).getTime() + 1*24*3600*1000)\r\n            newArray.push(`${afterOneDay.getFullYear()}/${parseInt(afterOneDay.getMonth()+1)}/${afterOneDay.getDate()}`)\r\n        })\r\n\r\n        return newArray\r\n    }\r\n\r\n    onChangeTask(e){\r\n        const {className, value, dataset} = e.target\r\n\r\n        this.setState({\r\n            [className]: (className === 'count'? parseInt(dataset.number) : value)\r\n        })\r\n    }\r\n\r\n    handleTasks(data){\r\n        let errorMsg = []\r\n        const {doType, doIndex} = data\r\n\r\n        if(this.props.isTaskPlaying){\r\n            errorMsg.push('請先將倒數器停止')\r\n        }\r\n        if(this.state.count === 0 && doType === 'create'){\r\n            errorMsg.push('請選擇想要添加幾顆番茄')\r\n        }\r\n        if(this.state.title === ''){\r\n            errorMsg.push('請輸入任務名稱')\r\n        }\r\n\r\n        if(errorMsg.length > 0){\r\n            this.setState({\r\n                errorMsg: 'ERROR：' + errorMsg.join('、')\r\n            })\r\n\r\n        }else if(doType!==''){\r\n            this.props.handleTasks({doType, doIndex}, this.state)\r\n\r\n            this.setState({\r\n                title: '',\r\n                errorMsg: '',\r\n                count: 1\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let {whereSideMenu, tasks, passedTasks} = this.props\r\n\r\n        switch (whereSideMenu){\r\n\r\n            case 'add-task':\r\n            const {title, count, errorMsg} = this.state\r\n\r\n            return (\r\n                <div id='side-page-content' className='add-task-content'>\r\n                    <p className='title'>ADD NEW TASK</p>\r\n                    <div className='content-block'>\r\n                        <p className='sub-title'>TASK TITLE</p>\r\n                        <input className='title' type='text' onChange={this.onChangeTask} value={title}/>\r\n                    </div>\r\n                    <div className='content-block'>\r\n                        <p className='sub-title'>ESTIMATED TOMOTO</p>\r\n                        <div className='tomatos'>\r\n                            {\r\n                                Array(10).fill('').map((item, index)=>{\r\n                                    return (\r\n                                        <div className='tomato' key={'tomato'+index}>\r\n                                            <label className='count' onClick={this.onChangeTask} data-number={index+1} data-filled={(count > index ? true : false)}></label>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <button onClick={()=>{this.handleTasks({'doType':'create', 'doIndex': -1})}}>ADD TASK</button>\r\n                    <p className='error-msg'>{errorMsg}</p>\r\n                </div>\r\n            )\r\n            break\r\n            \r\n            case 'show-tasks':\r\n            const {handleTaskSetting, handleTasks} = this.props\r\n\r\n            return (\r\n                <div id='side-page-content' className='show-tasks-content'>\r\n                    <p className='title'>TASK LISTS</p>\r\n                    <div className='content-block'>\r\n                        <p className='sub-title'>TO DO</p>\r\n                        <ul className='todo-content-block'>\r\n                            { tasks.length > 0 &&\r\n                            tasks.map((task, index)=>{\r\n                                const {title, tomatos, isEditing} = task\r\n                                return (\r\n                                    <li className='todo-content' key={'todo-content'+index}>\r\n                                        <div className='show-todo'>\r\n                                            <div className='task-info'>\r\n                                                <p>{title}</p>\r\n                                                <DrawCircles tomatos={tomatos}/>\r\n                                            </div>\r\n                                            <i className=\"task-setting fas fa-ellipsis-h\" data-rotate={isEditing} onClick={()=>{handleTaskSetting({'doType':'edit', 'doIndex': index}, {'tasks': task})}}></i>\r\n                                        </div>\r\n                                        { isEditing === true && (\r\n                                        <div className='edit-todo'>\r\n                                            <p className='edit-todo-title'>TASK TITLE</p>\r\n                                            <input className='title' type='text' onChange={this.onChangeTask} value={this.state.title}/>\r\n                                            <button className='edit-todo-save' onClick={()=>{this.handleTasks({'doType':'edit', 'doIndex': index})}}>SAVE</button>\r\n                                        </div>\r\n                                        )}\r\n                                    </li>\r\n                                )\r\n                            })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                    <div className='content-block'>\r\n                        <p className='sub-title'>DONE</p>\r\n                        <ul className='done-content-block'>\r\n                            { passedTasks.length > 0 &&\r\n                            passedTasks.map((passedTask, index)=>{\r\n                                const {title, tomatos, isEditing} = passedTask\r\n                                return (\r\n                                    <li className='done-content' key={'done-content'+index}>\r\n                                        <div className='show-done'>\r\n                                            <i className=\"far fa-check-circle\"></i>\r\n                                            <div className='task-info'>\r\n                                                <p>{title}</p>\r\n                                                <DrawCircles tomatos={tomatos}/>\r\n                                            </div>\r\n                                            <i className=\"task-setting fas fa-ellipsis-h\" data-rotate={isEditing} onClick={()=>{handleTaskSetting({'doType':'edit', 'doIndex': index}, {'passedTasks': passedTask})}}></i>\r\n                                        </div>\r\n                                        { isEditing===true && (\r\n                                        <div className='edit-done'>\r\n                                            <button className='edit-todo-save' onClick={()=>{handleTasks({'doType':'redo', 'doIndex': index})}}>REDO</button>\r\n                                        </div>\r\n                                        )}\r\n                                    </li>\r\n                                )\r\n                            })\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            )\r\n            break\r\n\r\n            case 'analysis-tasks':\r\n            const {todayDateArray} = this.state\r\n            const {sevenDaysAgoDate, handleChartsPeriod} = this.props\r\n\r\n            const sevenDaysAgoDateArray = [sevenDaysAgoDate.getFullYear(), sevenDaysAgoDate.getMonth()+1, sevenDaysAgoDate.getDate()]\r\n            const sevenDaysArray = this._getSevenDaysArray(sevenDaysAgoDateArray.join('/'))\r\n\r\n            return (\r\n                <div id='side-page-content' className='analysis-tasks-content'>\r\n                    <p className='title'>ANALYTICS REPORT</p>\r\n                    <div className='content-block'>\r\n                        <p className='sub-title'>TOMATO OF THIS WEEKE</p>\r\n                        <div className='analysis-datas'>\r\n                            <div className='analysis-data-block'>\r\n                                <p className='statistics-data'>\r\n                                {\r\n                                    passedTasks.filter((passedTask, index)=>{\r\n                                        return new Date(passedTask.completedTime).getTime() === new Date(todayDateArray.join('/')).getTime()\r\n                                    }).length\r\n                                }\r\n                                </p>\r\n                                <p className='statistics-period'>TODAY</p>\r\n                            </div>\r\n                            <div className='analysis-data-block'>\r\n                                <p className='statistics-data'>\r\n                                    { passedTasks.filter((passedTask, index)=>{\r\n                                        return new Date(passedTask.completedTime).getTime() >= new Date(sevenDaysArray[0]).getTime() && new Date(passedTask.completedTime).getTime() <= new Date(sevenDaysArray[6]).getTime()\r\n                                    }).length\r\n                                    }\r\n                                </p>\r\n                                <p className='statistics-period'>{sevenDaysArray[0] + '-' + sevenDaysArray[6]}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='content-block'>\r\n                        <p className='sub-title'>CHART</p>\r\n                        <div className='analysis-charts'>\r\n                        {\r\n                            sevenDaysArray.map((day, index)=>{\r\n                                const doneTaskCount = passedTasks.filter((passedTask, index)=>{\r\n                                    return passedTask.completedTime === day\r\n                                }).length\r\n\r\n                                return (\r\n                                    <div className='analysis-charts-column' key={'analysis-charts-column'+index}>\r\n                                        <div className='analysis-charts-count'>\r\n                                        <p className='analysis-charts-count-number'>{doneTaskCount > 0 && doneTaskCount}</p>\r\n                                        <DrawCircles tomatos={{'sum': doneTaskCount, 'count': doneTaskCount}}/>\r\n                                        </div>\r\n                                        <div className='analysis-charts-period'>{day.replace(todayDateArray[0]+'/','')}</div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        </div>\r\n                        <div className='setting-block'>\r\n                            <button onClick={()=>{handleChartsPeriod('prev')}}>PREV</button>\r\n                            {(sevenDaysArray[6] === todayDateArray.join('/')) ? (\r\n                                <button className='not-click'>NEXT</button>\r\n                            ):(\r\n                                <button onClick={()=>{handleChartsPeriod('next')}}>NEXT</button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n            break\r\n\r\n            case 'choose-music':\r\n            return (\r\n                <div id='side-page-content' className='choose-music-content'>\r\n                    <p className='title'>RING TONE</p>\r\n                    <div className='content-block'>\r\n                        <p className='sub-title'>WORK</p>\r\n                        <ul className='music-content-block'>\r\n                        </ul>\r\n                    </div>\r\n                    <div className='content-block'>\r\n                        <p className='sub-title'>BREAK</p>\r\n                        <ul className='music-content-block'>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            )\r\n            break\r\n\r\n            default:\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\nexport default SideNavContent","import * as React from 'react'\r\nimport './SideNav.scss';\r\nimport SideNavContent from './SideNavContent';\r\n\r\nclass SideNav extends React.Component{\r\n    constructor(){\r\n        super()\r\n\r\n        this.state = {\r\n            menuLists: [\r\n                {'add-task': 'add_circle_outline'},\r\n                {'show-tasks': 'menu'},\r\n                {'analysis-tasks': 'bar_chart'},\r\n                {'choose-music': 'music_note'}\r\n            ]\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        const {tasks, passedTasks, handleTasks, handleTaskSetting, handleSideMenu, handleClickMenu, handleChartsPeriod, isTaskPlaying, showSideMenu, whereSideMenu, sevenDaysAgoDate} = this.props\r\n        const {menuLists} = this.state\r\n\r\n        return (\r\n            <div className='side-page'>\r\n                <div id='side-page-menu'>\r\n                {\r\n                    menuLists.map((item, index)=>{\r\n                        const menuTitle = Object.keys(item)[0]\r\n\r\n                        return (<i onClick={()=>{handleClickMenu(menuTitle)}} data-menu-clicked={whereSideMenu === menuTitle} className={'material-icons ' + menuTitle} key={'side-menu' + index}>{Object.values(item)}</i>)\r\n                    })\r\n                }\r\n                </div>\r\n                <div id='control-button'>\r\n                    <input type='checkbox' id='control-nav' onClick={()=>{handleSideMenu()}}/>\r\n                    <label htmlFor='control-nav'></label>\r\n                </div>\r\n                { (showSideMenu) &&\r\n                    <SideNavContent tasks={tasks} passedTasks={passedTasks} isTaskPlaying={isTaskPlaying} handleTasks={handleTasks} handleTaskSetting={handleTaskSetting} handleChartsPeriod={handleChartsPeriod} whereSideMenu={whereSideMenu} sevenDaysAgoDate={sevenDaysAgoDate}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideNav\r\n\r\n\r\n/*\r\n<i className=\"add-task material-icons menu-click\">add_circle_outline</i>\r\n<i className=\"show-tasks material-icons\">menu</i>\r\n<i className=\"analysis-tasks material-icons\">bar_chart</i>\r\n<i className=\"choose-music material-icons\">music_note</i>\r\n*/","import React from 'react';\r\nimport './App.scss';\r\nimport MainPage from './MainPage';\r\nimport SideNav from './SideNav';\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super()\r\n\r\n    this.handleSideMenu=this.handleSideMenu.bind(this)\r\n    this.handleTaskPlaying=this.handleTaskPlaying.bind(this)\r\n    this.handleTasks=this.handleTasks.bind(this)\r\n    this.handleClickMenu=this.handleClickMenu.bind(this)\r\n    this.handleTaskSetting=this.handleTaskSetting.bind(this)\r\n    this.handleChartsPeriod=this.handleChartsPeriod.bind(this)\r\n\r\n    let sevenDaysAgoDate = new Date(new Date()-6*24*3600*1000)\r\n\r\n    this.workTimeLength = '00:10'\r\n    this.breakTimeLength = '00:05'\r\n\r\n    this.state = {\r\n      showSideMenu: false,\r\n      isTaskWorking: true, // Task 進行 or 休息\r\n      isTaskPlaying: false, // 倒數 or 暫停\r\n      whereSideMenu: 'add-task',\r\n      sevenDaysAgoDate,\r\n      passedTasks: [\r\n        // {\r\n        //   title: 'second task',\r\n        //   tomatos: {\r\n        //     sum: 8,\r\n        //     count: 7\r\n        //   },\r\n        //   isCompleted: false,\r\n        //   completedTime: '2019/8/4',\r\n        //   nowTimePlace: this.workTimeLength,\r\n        //   isEditing: false\r\n        // }\r\n      ],\r\n      tasks: [\r\n      // {\r\n      //   title: 'first task',\r\n      //   tomatos: {\r\n      //     sum: 10,\r\n      //     count: 9\r\n      //   },\r\n      //   isCompleted: false,\r\n      //   completedTime: null,\r\n      //   nowTimePlace: this.breakTimeLength,\r\n      //   isEditing: false\r\n      // }\r\n      ]\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.timerID)\r\n  }\r\n\r\n  _separateTimeString(timeString){\r\n    let nowTimer = timeString.split(':')\r\n\r\n    return parseInt(nowTimer[0]) * 60 + parseInt(nowTimer[1])\r\n  }\r\n\r\n  _combineTimeString(timeNumber){\r\n    let second = (timeNumber % 60 < 10)? '0' + timeNumber % 60 : timeNumber % 60\r\n    let minute = ((timeNumber - second) / 60 < 10)? '0' + (timeNumber - second) / 60 : (timeNumber - second) / 60\r\n\r\n    return minute + ':' + second\r\n  }\r\n\r\n  _startTimer(){\r\n    clearInterval(this.timerID)\r\n    let {tasks} = this.state\r\n\r\n    if(tasks[0].isCompleted){\r\n      return\r\n    }\r\n\r\n    this.timerID = setInterval(()=>{\r\n      tasks = this.state.tasks\r\n      let nowTimer = this._separateTimeString(tasks[0].nowTimePlace)\r\n\r\n      if(nowTimer === 0){\r\n        clearInterval(this.timerID)\r\n        \r\n        tasks[0].tomatos.count++\r\n        this.setState({\r\n          tasks\r\n        })\r\n        this._completedLevel()\r\n        return\r\n\r\n      }else{\r\n        nowTimer--\r\n        tasks[0].nowTimePlace = this._combineTimeString(nowTimer)\r\n        \r\n        this.setState({\r\n          tasks,\r\n          isTaskWorking: true,\r\n          isTaskPlaying: true\r\n        })\r\n      }\r\n    }, 500)\r\n  }\r\n\r\n  _pauseTimer(){\r\n    clearInterval(this.timerID)\r\n    const tasks = this.state.tasks\r\n\r\n    this.setState({\r\n      tasks\r\n    })\r\n  }\r\n\r\n  _breakTimer(){\r\n    clearInterval(this.timerID)\r\n    let {tasks} = this.state\r\n\r\n    this.timerID = setInterval(()=>{\r\n      tasks = this.state.tasks\r\n      let {nowTimePlace, tomatos} = tasks[0]\r\n      let nowTimer = this._separateTimeString(nowTimePlace)\r\n\r\n      if((tomatos.count === tomatos.sum) && (nowTimer === 0)){\r\n        clearInterval(this.timerID)\r\n        tasks[0].isCompleted=true\r\n\r\n        this.setState({\r\n          isTaskWorking: true,\r\n          isTaskPlaying: false,\r\n          tasks\r\n        })\r\n        this._resetTask()\r\n        return\r\n\r\n      }else if(nowTimer === 0){\r\n        clearInterval(this.timerID)\r\n        this._completedLevel()\r\n        return\r\n\r\n      }else{\r\n        nowTimer--\r\n        tasks[0].nowTimePlace = this._combineTimeString(nowTimer)\r\n\r\n        this.setState({\r\n          tasks\r\n        })\r\n      }\r\n    }, 500)\r\n  }\r\n\r\n  _resetTask(){\r\n    let {tasks, passedTasks}=this.state\r\n\r\n    if(tasks[0].isCompleted){\r\n      const nowTime = new Date()\r\n      tasks[0].completedTime = `${nowTime.getFullYear()}/${parseInt(nowTime.getMonth() + 1)}/${nowTime.getDate()}`\r\n      let shiftFirstTask = tasks.shift()\r\n      passedTasks.push(shiftFirstTask)\r\n      this.setState({\r\n        tasks,\r\n        passedTasks\r\n      })\r\n    }\r\n  }\r\n\r\n  _completedLevel(){\r\n    let {tasks, isTaskWorking} = this.state\r\n    let updatedTimePlace = isTaskWorking ? this.breakTimeLength : this.workTimeLength\r\n\r\n    tasks[0].nowTimePlace = updatedTimePlace\r\n\r\n    setTimeout(()=>{\r\n      this.setState({\r\n        tasks,\r\n        isTaskWorking: !isTaskWorking,\r\n        isTaskPlaying: false\r\n      })\r\n    }, 300)\r\n  }\r\n\r\n  handleTaskPlaying(taskSettings){\r\n    let {tasks, isTaskWorking} = this.state\r\n\r\n    switch(taskSettings){\r\n\r\n      case 'start':\r\n        if(isTaskWorking){\r\n          this._startTimer()\r\n\r\n          this.setState({\r\n            isTaskPlaying: true,\r\n            isTaskWorking: true\r\n          })\r\n\r\n        }else{\r\n          this._breakTimer()\r\n\r\n          this.setState({\r\n            isTaskPlaying: true,\r\n            isTaskWorking: false\r\n          })\r\n\r\n        }\r\n      break\r\n\r\n      case 'pause':\r\n        this._pauseTimer()\r\n\r\n        this.setState({\r\n          isTaskPlaying: false\r\n        })\r\n      break\r\n\r\n      case 'reset':\r\n        tasks[0].nowTimePlace = this.workTimeLength\r\n        \r\n        this.setState({\r\n          tasks\r\n        })\r\n      break\r\n\r\n      default:\r\n      break\r\n    }\r\n  }\r\n\r\n  handleSideMenu(){\r\n    this.setState({\r\n        showSideMenu: !this.state.showSideMenu\r\n    })\r\n  }\r\n\r\n  handleTaskSetting(doWhat, data){\r\n    let {doType, doIndex} = doWhat\r\n    let {tasks, passedTasks} = this.state\r\n\r\n    if('tasks' in data ){\r\n      let taskIsEditing = data.tasks.isEditing\r\n\r\n      tasks = tasks.map((task, index)=>{\r\n        if(taskIsEditing){\r\n          task.isEditing = false\r\n        }else{\r\n          task.isEditing = (doIndex === index)? !taskIsEditing : taskIsEditing\r\n        }\r\n        return task\r\n\r\n      })\r\n      \r\n      this.setState({\r\n        tasks\r\n      })\r\n\r\n    }else if('passedTasks' in data){\r\n      let passedTaskIsEditing = data.passedTasks.isEditing\r\n\r\n      passedTasks = passedTasks.map((passedTask, index)=>{\r\n        if(passedTaskIsEditing){\r\n          passedTask.isEditing = false\r\n        }else{\r\n          passedTask.isEditing = (doIndex === index)? !passedTaskIsEditing : passedTaskIsEditing\r\n        }\r\n        return passedTask\r\n      })\r\n      \r\n      this.setState({\r\n        passedTasks\r\n      })\r\n    }\r\n  }\r\n\r\n  handleTasks(doWhat, data){\r\n    let {doType, doIndex} = doWhat\r\n    let {tasks, passedTasks} = this.state\r\n    \r\n    switch(doType){\r\n\r\n      case 'create':\r\n        tasks.push({\r\n          title: data.title,\r\n          tomatos: {\r\n            sum: data.count,\r\n            count: 0\r\n          },\r\n          isCompleted: false,\r\n          completedTime: null,\r\n          nowTimePlace: this.workTimeLength,\r\n          isEditing: false\r\n        })\r\n\r\n        this._resetTask()\r\n        this.setState({\r\n          tasks\r\n        })\r\n      break\r\n      \r\n      case 'edit':\r\n        tasks[doIndex].title = data.title\r\n        tasks[doIndex].isEditing = false\r\n        \r\n        this.setState({\r\n          tasks\r\n        })\r\n      break\r\n      \r\n      case 'redo':\r\n        passedTasks[doIndex].nowTimePlace = this.workTimeLength\r\n        passedTasks[doIndex].isCompleted = false\r\n        passedTasks[doIndex].isEditing = false\r\n        tasks.push(passedTasks[doIndex])\r\n        passedTasks.splice(doIndex, 1)\r\n        \r\n        this.setState({\r\n          tasks,\r\n          passedTasks\r\n        })\r\n      break\r\n      \r\n      case 'completed':\r\n        clearInterval(this.timerID)\r\n        tasks[0].isCompleted = true\r\n\r\n        this._resetTask()\r\n        this.setState({\r\n          tasks,\r\n          passedTasks\r\n        })\r\n      break\r\n\r\n      default:\r\n      break\r\n    }\r\n  }\r\n\r\n  handleClickMenu(clickWhat){\r\n\r\n    this.setState({\r\n      whereSideMenu: clickWhat\r\n    })\r\n  }\r\n\r\n  handleChartsPeriod(type){\r\n    const oneDay = 1 * 24 * 3600 * 1000\r\n    let sevenDaysAgoDate = this.state.sevenDaysAgoDate\r\n\r\n    if(type === 'prev'){\r\n      sevenDaysAgoDate = new Date(sevenDaysAgoDate.getTime() - oneDay)\r\n\r\n    }else if(type === 'next'){\r\n      sevenDaysAgoDate = new Date(sevenDaysAgoDate.getTime() + oneDay)\r\n\r\n    }\r\n\r\n    this.setState({\r\n      sevenDaysAgoDate\r\n    })\r\n\r\n  }\r\n\r\n  render(){\r\n    let {tasks, passedTasks, isTaskPlaying, isTaskWorking, showSideMenu, whereSideMenu, sevenDaysAgoDate} = this.state\r\n\r\n    return (\r\n        <div className='App'>\r\n            <MainPage tasks={tasks} isTaskPlaying={isTaskPlaying} isTaskWorking={isTaskWorking} handleTasks={this.handleTasks} handleTaskPlaying={this.handleTaskPlaying}/>\r\n            <SideNav passedTasks={passedTasks} tasks={tasks} isTaskPlaying={isTaskPlaying} handleTasks={this.handleTasks} handleTaskSetting={this.handleTaskSetting} handleSideMenu={this.handleSideMenu} handleChartsPeriod={this.handleChartsPeriod} showSideMenu={showSideMenu} whereSideMenu={whereSideMenu} sevenDaysAgoDate={sevenDaysAgoDate} handleClickMenu={this.handleClickMenu}/>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}